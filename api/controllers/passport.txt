passport.use(new OAuth2Strategy({
    authorizationURL: 'https://www.example.com/oauth2/authorize',
    tokenURL: 'https://www.example.com/oauth2/token',
    clientID: EXAMPLE_CLIENT_ID,
    clientSecret: EXAMPLE_CLIENT_SECRET,
    callbackURL: "http://localhost:3000/auth/example/callback"
  },
  function(accessToken, refreshToken, profile, cb) {
    User.findOrCreate({ exampleId: profile.id }, function (err, user) {
      return cb(err, user);
    });
  }
));


////////////////////////////////////////////////////


export const google = async (req, res, next) => {
  try {
    const user = await User.findOne({ email : req.body.email });
    if(user){
      const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET);
      const {password : pass , ...rest } = user._doc;
      res
      .cookie("token", token, {httpOnly : true})
      .status(200)
      .json(rest);
    }else{
      const generatedPassword = Math.random().toString(36).slice(-8);
      const hashedPassword = bcryptjs.hashSync(generatedPassword);
      const newUser = new User({username : req.body.name.split(' ').join('').toLowerCase(), email : req.body.email, password : hashedPassword, avatar : req.body.photo});
      await newUser.save();
      const token = jwt.sign({ id: newUser._id }, process.env.JWT_SECRET);
      const {password : pass , ...rest } = newUser._doc;
      res
      .cookie("token", token, {httpOnly : true})
      .status(200)
      .json(rest);

    }
  } catch (error) {
    next(error)
  }
}
